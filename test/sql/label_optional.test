# name: test/sql/label_optional.test
# description: Testing the optional label for property graph creation
# group: [sql]

require duckpgq

# Test with a different number of vertices and edges
statement ok
CREATE TABLE VariedStudent(id BIGINT, name VARCHAR);INSERT INTO VariedStudent VALUES (0, 'Alice'), (1, 'Bob'), (2, 'Charlie'), (3, 'Dave'), (4, 'Eve'), (5, 'Frank');

statement ok
CREATE TABLE VariedKnow(src BIGINT, dst BIGINT);INSERT INTO VariedKnow VALUES (0,1), (0,2), (0,3), (1,2), (2,3), (3,4), (4,5);

query II
SELECT * FROM (WITH edges_cte AS (SELECT src_table.rowid AS src, dst_table.rowid AS dst, VariedKnow.rowid AS edges FROM VariedKnow INNER JOIN VariedStudent AS src_table ON ((VariedKnow.src = src_table.id)) INNER JOIN VariedStudent AS dst_table ON ((VariedKnow.dst = dst_table.id))), csr_cte AS (SELECT create_csr_edge(0, (SELECT count(VariedStudent.id) FROM VariedStudent AS VariedStudent), CAST((SELECT multiply(2, sum(create_csr_vertex(0, (SELECT count(VariedStudent.id) FROM VariedStudent AS VariedStudent), sub.dense_id, sub.cnt))) FROM (SELECT dense_id, count(outgoing_edges) AS cnt FROM ((SELECT VariedStudent.rowid AS dense_id, VariedKnow.src AS outgoing_edges, VariedKnow.dst AS incoming_edges FROM VariedKnow INNER JOIN VariedStudent ON ((VariedKnow.src = VariedStudent.id))) UNION BY NAME (SELECT VariedStudent.rowid AS dense_id, VariedKnow.dst AS outgoing_edges, VariedKnow.src AS incoming_edges FROM VariedKnow INNER JOIN VariedStudent ON ((VariedKnow.dst = VariedStudent.id)))) AS unique_edges GROUP BY dense_id) AS sub) AS BIGINT), (SELECT multiply(2, count()) FROM ((SELECT src, dst FROM edges_cte) UNION BY NAME (SELECT dst AS src, src AS dst FROM edges_cte))), src, dst, edge) AS "temp" FROM (SELECT src, dst, any_value(edges) AS edge FROM ((SELECT src, dst, edges FROM edges_cte) UNION ALL (SELECT dst, src, edges FROM edges_cte)) GROUP BY src, dst))SELECT VariedStudent.id, "add"(__x."temp", local_clustering_coefficient(0, VariedStudent.rowid)) AS local_clustering_coefficient FROM VariedStudent CROSS JOIN (SELECT multiply(0, count(csr_cte."temp")) AS "temp" FROM csr_cte) AS __x) AS lcc;
----
0	0.6666667
1	1.0
2	0.6666667
3	0.33333334
4	0.0
5	0.0

statement ok
-CREATE PROPERTY GRAPH varied_pg_label_a
VERTEX TABLES (
    VariedStudent label a
    )
EDGE TABLES (
    VariedKnow    SOURCE KEY ( src ) REFERENCES VariedStudent ( id )
            DESTINATION KEY ( dst ) REFERENCES VariedStudent ( id )
    );


query II
select id, local_clustering_coefficient from local_clustering_coefficient(varied_pg_label_a, a, variedknow);
----
0	0.6666667
1	1.0
2	0.6666667
3	0.33333334
4	0.0
5	0.0

statement ok
select * from pagerank(varied_pg_label_a, a, variedknow);

statement error
select id, local_clustering_coefficient from local_clustering_coefficient(varied_pg_label_a, variedStudent, variedknow);
----
Invalid Error: Label 'variedstudent' not found. Did you mean the vertex label 'a'?


statement ok
import database 'duckdb/data/SNB0.003';

statement ok
-CREATE PROPERTY GRAPH snb
VERTEX TABLES (
    Person,
    Organisation IN typemask(company, university)
    )
EDGE TABLES (
    Person_knows_person     SOURCE KEY (Person1Id) REFERENCES Person (id)
                            DESTINATION KEY (Person2Id) REFERENCES Person (id)
                            LABEL Knows,
    person_workAt_Organisation SOURCE KEY (PersonId) REFERENCES Person (id)
                               DESTINATION KEY (OrganisationId) REFERENCES Organisation (id)
                               LABEL workAt_Organisation
   );

query III
-FROM GRAPH_TABLE (snb
    MATCH (p:Person)-[w:workAt_Organisation]->(u:University)
    COLUMNS (p.id as p_id, u.id as u_id, u.type)
    ) tmp
    ORDER BY p_id, u_id
    limit 10;
----
14	4593	University
16	5809	University
32	5047	University
2199023255557	1953	University
2199023255573	5263	University
2199023255594	1597	University
4398046511139	4929	University
6597069766702	5038	University
8796093022234	3008	University
8796093022244	3008	University


query II
-FROM GRAPH_TABLE (snb
    MATCH (p:Person)-[k:knows]->(p2:Person)
    COLUMNS (p.id as p_id, p2.id as p2_id)
    ) tmp
    order by p_id, p2_id
    limit 10;
----
14	10995116277782
14	24189255811081
14	26388279066668
16	2199023255594
16	26388279066655
16	28587302322180
16	28587302322204
32	2199023255594
32	13194139533352
32	17592186044461
